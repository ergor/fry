
ARR  PIECE          1D
[00] black_rook    | 0
[01] black_knight  | 1
[02] black_bishop  | 2
[03] black_queen   | 3
[04] black_king    | 4
[05] black_bishop  | 6
[06] black_knight  | 6
[07] black_rook    | 7

[08] black_pawn1   | 8
[09] black_pawn2   | 9
[10] black_pawn3   | 10
[11] black_pawn4   | 11
[12] black_pawn5   | 12
[13] black_pawn6   | 13
[14] black_pawn7   | 14
[15] black_pawn8   | 15

[16] white_pawn1   | 48
[17] white_pawn2   | 49
[18] white_pawn3   | 50
[19] white_pawn4   | 51
[20] white_pawn5   | 52
[21] white_pawn6   | 53
[22] white_pawn7   | 54
[23] white_pawn8   | 55

[24] white_rook    | 56
[25] white_knight  | 57
[26] white_bishop  | 58
[27] white_queen   | 59
[28] white_king    | 60
[29] white_bishop  | 61
[30] white_knight  | 62
[31] white_rook    | 63

======= move black_pawn1 one forward (landing_1d > original_1d):
original_1d = 8
landing_1d  = 16

    ARR  PIECE          1D      | array traversal direction
    [00] black_rook    | 0      |
    [01] black_knight  | 1      V
    [02] black_bishop  | 2
    [03] black_queen   | 3
    [04] black_king    | 4
    [05] black_bishop  | 6
    [06] black_knight  | 6
    [07] black_rook    | 7

+------------------<   | 8      don't copy moving piece yet; skip to next piece
|   [--] black_pawn2   | 9      continue copying into new array from moving_piece's original index...
|   [--] black_pawn3   | 10     .
|   [--] black_pawn4   | 11     .
|   [--] black_pawn5   | 12     .
|   [--] black_pawn6   | 13     .
|   [--] black_pawn7   | 14     .
|   [--] black_pawn8   | 15     .
|                               .
+-> [--] black_pawn1   | 16     while piece 1D index < landing square 1D index. then copy moving piece into new array with updated coords

    [--] white_pawn1   | 48
    [--] white_pawn2   | 49
    [--] white_pawn3   | 50
    [--] white_pawn4   | 51
    [--] white_pawn5   | 52
    [--] white_pawn6   | 53
    [--] white_pawn7   | 54
    [--] white_pawn8   | 55

    [--] white_rook    | 56
    [--] white_knight  | 57
    [--] white_bishop  | 58
    [--] white_queen   | 59
    [--] white_king    | 60
    [--] white_bishop  | 61
    [--] white_knight  | 62
    [--] white_rook    | 63


======= move white_pawn8 one forward (landing_1d < original_1d):
original_1d = 55
landing_1d  = 47

    ARR  PIECE          1D      | array traversal direction
    [00] black_rook    | 0      |
    [01] black_knight  | 1      V
    [02] black_bishop  | 2
    [03] black_queen   | 3
    [04] black_king    | 4
    [05] black_bishop  | 6
    [06] black_knight  | 6
    [07] black_rook    | 7

    [08] black_pawn1   | 8
    [09] black_pawn2   | 9
    [10] black_pawn3   | 10
    [11] black_pawn4   | 11
    [12] black_pawn5   | 12
    [13] black_pawn6   | 13
    [14] black_pawn7   | 14
    [15] black_pawn8   | 15
    
+-> [--] white_pawn8   | 47
|
|   [--] white_pawn1   | 48
|   [--] white_pawn2   | 49
|   [--] white_pawn3   | 50
|   [--] white_pawn4   | 51
|   [--] white_pawn5   | 52
|   [--] white_pawn6   | 53
|   [--] white_pawn7   | 54
+------------------<   | 55     same as above case, as long as we traverse in opposite direction, ie towards lower array index

    [--] white_rook    | 56
    [--] white_knight  | 57
    [--] white_bishop  | 58
    [--] white_queen   | 59
    [--] white_king    | 60
    [--] white_bishop  | 61
    [--] white_knight  | 62
    [--] white_rook    | 63
